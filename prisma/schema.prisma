generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  name          String
  password      String?
  image         String?
  address_1     String?
  address_2     String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  accounts      Account[]
  citizens      citizens?
  manager       manager?
  sessions      Session[]

  @@map("users")
}

model manager {
  id             Int              @id @default(autoincrement())
  userId         String           @unique
  user           User             @relation(fields: [userId], references: [id])
  answer_article answer_article[]
  notice_article notice_article[]
}

model citizens {
  id               Int                @id @default(autoincrement())
  userId           String             @unique
  user             User               @relation(fields: [userId], references: [id])
  contest_article  contest_article[]
  free_article     free_article[]
  profile          profile?
  question_article question_article[]
  team_article     team_article[]
  team             team[]
}

model profile {
  id            Int             @id @default(autoincrement())
  citizens_id   Int             @unique
  content       String?
  citizens      citizens        @relation(fields: [citizens_id], references: [id])
  resume        resume[]
  certificate   certificate[]
  contest       contest[]
  program       program[]
  skill_stack   skill_stack[]
  sns           sns[]
  spcialization spcialization[]
}

model article {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  published        Boolean           @default(false)
  answer_article   answer_article?
  comment          comment[]
  content          content?
  contest_article  contest_article?
  free_article     free_article?
  notice_article   notice_article?
  question_article question_article?
  report           report[]
  team_article     team_article?
}

model content {
  id         Int      @id @default(autoincrement())
  article_id Int      @unique
  title      String
  body       String
  createdAt  DateTime @default(now()) @map("created_at")
  article    article  @relation(fields: [article_id], references: [id])
}

model comment {
  id         Int      @id @default(autoincrement())
  article_id Int
  createdAt  DateTime @default(now()) @map("created_at")
  article    article  @relation(fields: [article_id], references: [id])

  @@index([article_id], map: "comment_article_id_fkey")
}

model notice_article {
  id         Int     @id @default(autoincrement())
  article_id Int     @unique
  manager_id Int
  article    article @relation(fields: [article_id], references: [id])
  manager    manager @relation(fields: [manager_id], references: [id])

  @@index([manager_id], map: "notice_article_manager_id_fkey")
}

model answer_article {
  id         Int     @id @default(autoincrement())
  article_id Int     @unique
  manager_id Int
  article    article @relation(fields: [article_id], references: [id])
  manager    manager @relation(fields: [manager_id], references: [id])

  @@index([manager_id], map: "answer_article_manager_id_fkey")
}

model question_article {
  id          Int      @id @default(autoincrement())
  article_id  Int      @unique
  citizens_id Int
  article     article  @relation(fields: [article_id], references: [id])
  citizens    citizens @relation(fields: [citizens_id], references: [id])

  @@index([citizens_id], map: "question_article_citizens_id_fkey")
}

model contest_article {
  id          Int      @id @default(autoincrement())
  article_id  Int      @unique
  citizens_id Int
  contestId   Int
  article     article  @relation(fields: [article_id], references: [id])
  citizens    citizens @relation(fields: [citizens_id], references: [id])
  contest     contest  @relation(fields: [contestId], references: [id])

  @@index([citizens_id], map: "contest_article_citizens_id_fkey")
  @@index([contestId], map: "contest_article_contestId_fkey")
}

model team_article {
  id          Int      @id @default(autoincrement())
  article_id  Int      @unique
  citizens_id Int
  article     article  @relation(fields: [article_id], references: [id])
  citizens    citizens @relation(fields: [citizens_id], references: [id])

  @@index([citizens_id], map: "team_article_citizens_id_fkey")
}

model free_article {
  id          Int      @id @default(autoincrement())
  article_id  Int      @unique
  citizens_id Int
  article     article  @relation(fields: [article_id], references: [id])
  citizens    citizens @relation(fields: [citizens_id], references: [id])

  @@index([citizens_id], map: "free_article_citizens_id_fkey")
}

model skill_stack {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  contest     contest[]
  profile     profile[]
  team        team[]
}

model certificate {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  contest     contest[]
  profile     profile[]
  team        team[]
}

model program {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  contest     contest[]
  profile     profile[]
  team        team[]
}

model spcialization {
  id                    Int       @id @default(autoincrement())
  name                  String    @unique
  description           String?
  contest_spcialization contest[]
  profile               profile[]
  team_spcialization    team[]
}

model team {
  id            Int             @id @default(autoincrement())
  status        Boolean         @default(false)
  createdAt     DateTime        @default(now()) @map("created_at")
  certificate   certificate[]
  citizens      citizens[]
  contest       contest[]
  program       program[]
  skill_stack   skill_stack[]
  spcialization spcialization[]
}

model contest {
  id              Int               @id @default(autoincrement())
  contest_name    String
  prize           Int
  content         String
  end_period      DateTime          @db.Date
  start_period    DateTime          @db.Date
  contest_article contest_article[]
  certificate     certificate[]
  corporate_type  corporate_type[]
  profile         profile[]
  program         program[]
  skill_stack     skill_stack[]
  spcialization   spcialization[]
  team            team[]
}

model sns {
  id      Int       @id @default(autoincrement())
  name    String
  profile profile[]
}

model report {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  articleId  Int?
  article    article? @relation(fields: [articleId], references: [id])

  @@index([articleId], map: "report_articleId_fkey")
}

model resume {
  id          Int      @id @default(autoincrement())
  profile_id  Int
  resume_name String
  url         String
  created_at  DateTime @default(now())
  profile     profile  @relation(fields: [profile_id], references: [id])

  @@index([profile_id], map: "resume_profile_id_fkey")
}

model corporate_type {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  contest contest[]
}

model es_table {
  id                BigInt   @id @unique(map: "unique_id") @db.UnsignedBigInt
  client_name       String   @db.VarChar(32)
  modification_time DateTime @default(now()) @db.Timestamp(0)
  insertion_time    DateTime @default(now()) @db.Timestamp(0)
}
