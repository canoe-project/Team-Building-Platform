// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

//user
model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  name          String
  password      String?
  image         String?
  address_1     String?
  address_2     String?

  created_at DateTime  @default(now()) @map(name: "created_at")
  updated_at DateTime  @updatedAt @map(name: "updated_at")
  accounts   Account[]
  sessions   Session[]
  citizens   citizens?
  manager    manager?
  @@map(name: "users")
}

model manager {
  id Int @id @default(autoincrement())

  notice_article notice_article[]
  answer_article answer_article[]
  user           User             @relation(fields: [userId], references: [id])
  userId         String           @unique
}

model citizens {
  id Int @id @default(autoincrement())

  profile          profile?
  question_article question_article[]
  contest_article  contest_article[]
  team_article     team_article[]
  free_article     free_article[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
  team   team[]
}

model profile {
  id Int @id @default(autoincrement())

  citizens    citizens @relation(fields: [citizens_id], references: [id])
  citizens_id Int      @unique

  content String?

  resume        resume[]
  skill_stack   skill_stack[]
  certificate   certificate[]
  program       program[]
  spcialization spcialization[]
  contest       contest[]
  sns           sns[]
}

//article
model article {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  published Boolean  @default(false)

  comment comment[]
  content content?
  report  report[]

  notice_article   notice_article?
  answer_article   answer_article?
  question_article question_article?
  contest_article  contest_article?
  team_article     team_article?
  free_article     free_article?
}

model content {
  id Int @id @default(autoincrement())

  article    article @relation(fields: [article_id], references: [id])
  article_id Int     @unique

  title     String
  body      String
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model comment {
  id         Int      @id @default(autoincrement())
  article    article  @relation(fields: [article_id], references: [id])
  article_id Int
  createdAt  DateTime @default(now()) @map(name: "created_at")
}

model notice_article {
  id         Int     @id @default(autoincrement())
  manager    manager @relation(fields: [manager_id], references: [id])
  article    article @relation(fields: [article_id], references: [id])
  article_id Int     @unique
  manager_id Int
}

model answer_article {
  id         Int     @id @default(autoincrement())
  manager    manager @relation(fields: [manager_id], references: [id])
  article    article @relation(fields: [article_id], references: [id])
  article_id Int     @unique
  manager_id Int
}

model question_article {
  id          Int      @id @default(autoincrement())
  citizens    citizens @relation(fields: [citizens_id], references: [id])
  article     article  @relation(fields: [article_id], references: [id])
  article_id  Int      @unique
  citizens_id Int
}

model contest_article {

  id          Int      @id @default(autoincrement())
  citizens    citizens @relation(fields: [citizens_id], references: [id])
  article     article  @relation(fields: [article_id], references: [id])
  article_id  Int      @unique
  citizens_id Int
  contest     contest  @relation(fields: [contestId], references: [id])
  contestId   Int
}

model team_article {
  id          Int      @id @default(autoincrement())
  citizens    citizens @relation(fields: [citizens_id], references: [id])
  article     article  @relation(fields: [article_id], references: [id])
  article_id  Int      @unique
  citizens_id Int
}

model free_article {
  id          Int      @id @default(autoincrement())
  citizens    citizens @relation(fields: [citizens_id], references: [id])
  article     article  @relation(fields: [article_id], references: [id])
  article_id  Int      @unique
  citizens_id Int
}

model skill_stack {
  id Int @id @default(autoincrement())

  name        String
  description String

  contest contest[]
  team    team[]
  profile profile[]

}

model certificate {
  id Int @id @default(autoincrement())

  name        String
  description String

  team    team[]
  contest contest[]
  profile profile[]

}

model program {
  id Int @id @default(autoincrement())

  name        String
  description String

  team_program team[]
  contest      contest[]
  profile      profile[]
}

model spcialization {
  id Int @id @default(autoincrement())

  name        String
  description String

  team_spcialization team[]

  contest_spcialization contest[]

  profile profile[]

}

model team {
  id                 Int             @id @default(autoincrement())
  status             Boolean         @default(false)
  createdAt          DateTime        @default(now()) @map(name: "created_at")
  citizens           citizens[]
  team_contest       contest[]
  team_skill_stack   skill_stack[]
  team_certificate   certificate[]
  team_program       program[]
  team_spcialization spcialization[]


}

model contest {
  id           Int      @id @default(autoincrement())
  contest_name String
  prize        Int
  priod        DateTime


  contest_article contest_article[]
  skill_stack     skill_stack[]
  certificate     certificate[]

  program program[]


  contest_spcialization spcialization[]
  profile               profile[]
  team                  team[]

}

model sns {
  id   Int    @id @default(autoincrement())
  name String

  profile profile[]
}

model report {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now()) @map(name: "created_at")
  article    article? @relation(fields: [articleId], references: [id])
  articleId  Int?
}

model resume {
  id          Int      @id @default(autoincrement())
  profile     profile  @relation(fields: [profile_id], references: [id])
  profile_id  Int
  resume_name String
  url         String
  created_at  DateTime @default(now()) @map(name: "created_at")
}
